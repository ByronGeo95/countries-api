{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/byrongeo/Desktop/countries-api/pages/europe.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/Layout.js';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Image from 'react-bootstrap/Image';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGlobe, faGlobeEurope } from '@fortawesome/free-solid-svg-icons';\n\nvar Europe = function Europe(props) {\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, __jsx(\"hr\", {\n    style: {\n      backgroundColor: 'black',\n      padding: '0.75px',\n      marginTop: 0,\n      marginBottom: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    style: {\n      marginBottom: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, \" \", __jsx(FontAwesomeIcon, {\n    icon: faGlobe,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 47\n    }\n  }), \" FILTER\"), __jsx(\"hr\", {\n    style: {\n      backgroundColor: 'black',\n      padding: '0.75px',\n      marginTop: 0,\n      marginBottom: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }), __jsx(\"h3\", {\n    style: {\n      marginBottom: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, \" \", __jsx(FontAwesomeIcon, {\n    icon: faGlobeEurope,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 47\n    }\n  }), \" EUROPE\"), __jsx(\"hr\", {\n    style: {\n      backgroundColor: 'black',\n      padding: '0.75px',\n      marginTop: 0,\n      marginBottom: '25px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }), __jsx(Container, {\n    fluid: true,\n    style: {\n      width: '1300px',\n      \"float\": 'center',\n      textAlign: 'center',\n      marginleft: 'auto',\n      marginRight: 'auto'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }\n  }, props.europeData.map(function (_ref) {\n    var alpha2Code = _ref.alpha2Code,\n        name = _ref.name,\n        capital = _ref.capital,\n        flag = _ref.flag,\n        region = _ref.region,\n        subregion = _ref.subregion,\n        latlng = _ref.latlng,\n        area = _ref.area,\n        population = _ref.population,\n        timezones = _ref.timezones,\n        demonym = _ref.demonym,\n        callingCodes = _ref.callingCodes;\n    return __jsx(\"div\", {\n      className: \"col-md-3\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }\n    }, __jsx(Link, {\n      as: \"/\".concat(alpha2Code),\n      href: \"/selectedCountry?alpha2Code=\".concat(alpha2Code, \"&name=\").concat(name, \"&capital=\").concat(capital, \"&flag=\").concat(flag, \"&continent=\").concat(region, \"&region=\").concat(subregion, \"&lat=\").concat(latlng[0], \"&lon=\").concat(latlng[1], \"&area=\").concat(area, \"&population=\").concat(population, \"&timezone=\").concat(timezones[0], \"&demonym=\").concat(demonym, \"&callingCode=\").concat(callingCodes[0]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 29\n      }\n    }, __jsx(\"a\", {\n      style: {\n        fontSize: '11px',\n        color: 'black',\n        textDecoration: 'none',\n        \"float\": 'left',\n        textAlign: 'left'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 33\n      }\n    }, \" \", __jsx(Image, {\n      src: flag,\n      style: {\n        width: '7.5%',\n        marginBottom: '4px',\n        marginRight: '5px',\n        \"float\": 'left',\n        textAlign: 'left'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 142\n      }\n    }), name)), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 29\n      }\n    }), __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 29\n      }\n    }));\n  })))));\n};\n\n_c = Europe;\nEurope.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var result, data;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('https://restcountries.eu/rest/v2/region/europe');\n\n        case 2:\n          result = _context.sent;\n          _context.next = 5;\n          return result.json();\n\n        case 5:\n          data = _context.sent;\n          console.log(\"Country Data Successfully Fetched! Length of Data is: \".concat(data.length));\n          console.log(\"  \");\n          console.log(\"Country Data: \".concat(JSON.stringify(data)));\n          return _context.abrupt(\"return\", {\n            europeData: data\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default Europe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Europe\");","map":{"version":3,"sources":["/Users/byrongeo/Desktop/countries-api/pages/europe.js"],"names":["Layout","Link","fetch","Container","Row","Image","FontAwesomeIcon","faGlobe","faGlobeEurope","Europe","props","backgroundColor","padding","marginTop","marginBottom","width","textAlign","marginleft","marginRight","europeData","map","alpha2Code","name","capital","flag","region","subregion","latlng","area","population","timezones","demonym","callingCodes","fontSize","color","textDecoration","getInitialProps","result","json","data","console","log","length","JSON","stringify"],"mappings":"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","sourcesContent":["import Layout from '../components/Layout.js';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Image from 'react-bootstrap/Image';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGlobe, faGlobeEurope } from '@fortawesome/free-solid-svg-icons';\n\nconst Europe = (props) => (\n    <Layout>\n        <div>\n\n            <hr style={{ backgroundColor: 'black', padding: '0.75px', marginTop: 0, marginBottom: 0 }} ></hr>\n            <h2 style={{ marginBottom: 0 }} > <FontAwesomeIcon icon={faGlobe} /> FILTER</h2>\n            <hr style={{ backgroundColor: 'black', padding: '0.75px', marginTop: 0, marginBottom: 0 }} ></hr>\n            <h3 style={{ marginBottom: 0 }} > <FontAwesomeIcon icon={faGlobeEurope} /> EUROPE</h3>\n            <hr style={{ backgroundColor: 'black', padding: '0.75px', marginTop: 0, marginBottom: '25px' }} ></hr>\n            \n            <Container fluid style={{ width: '1300px', float: 'center', textAlign: 'center', marginleft: 'auto', marginRight: 'auto' }} >\n                <Row>\n                    {props.europeData.map(({ alpha2Code, name, capital, flag, region, subregion, latlng, area, population, timezones, demonym, callingCodes }) => (\n                        <div className='col-md-3' >\n                            <Link as={`/${alpha2Code}`} href={`/selectedCountry?alpha2Code=${alpha2Code}&name=${name}&capital=${capital}&flag=${flag}&continent=${region}&region=${subregion}&lat=${latlng[0]}&lon=${latlng[1]}&area=${area}&population=${population}&timezone=${timezones[0]}&demonym=${demonym}&callingCode=${callingCodes[0]}`} >\n                                <a style={{ fontSize: '11px', color: 'black' , textDecoration: 'none', float: 'left', textAlign: 'left' }} > <Image src={flag} style={{ width: '7.5%', marginBottom: '4px', marginRight: '5px', float: 'left', textAlign: 'left' }} />{name}</a>\n                            </Link>\n                            <br></br>\n                            <br></br>\n                        </div> \n                    ))} \n                </Row>\n            </Container>\n\n        </div>\n    </Layout>\n);\n\nEurope.getInitialProps = async function() {\n\n    const result = await fetch('https://restcountries.eu/rest/v2/region/europe');\n    const data = await result.json();\n\n    console.log(`Country Data Successfully Fetched! Length of Data is: ${data.length}`);\n    console.log(`  `);\n    console.log(`Country Data: ${JSON.stringify(data)}`);\n\n    return {\n        europeData: data\n    };\n\n};\n\nexport default Europe;"]},"metadata":{},"sourceType":"module"}